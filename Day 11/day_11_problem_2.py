import sys
import time
# import itertools
from collections import Counter


def read_input_string(file_path):
    with open(file_path, 'r') as file:
        line = file.readline().strip()
        # split line on spaces
        return line.split()

def is_even_length(string):
    return len(string) % 2 == 0

def remove_leading_zeroes(string):
    while len(string) >= 2 and string[0] == '0':
        string = string[1:]
    return string

def split_even_length_string(string):
    if not is_even_length(string):
        return None
    return [string[:len(string) // 2], string[len(string) // 2:]]

cache = {}

# Stones generated by the blinker
# key is the stone string and value is the number of times it was generated

def blink_single_stone(stone):
    if stone in cache:
        return cache[stone]
    if stone == '0':
        result = ['1']
    elif is_even_length(stone):
        splits = split_even_length_string(stone)
        splits[1] = remove_leading_zeroes(splits[1])
        result = splits
    else:
        new_string = str(2024 * int(stone))
        result = [new_string]
    cache[stone] = result
    return result

def blink_string_list(stones, num_iterations):
    new_stones = Counter()
    for stone, count in stones.items():
        blink_result = blink_single_stone(stone)
        # Try to figure out why this doesn't work
        # updates = {}
        # for stone_val in blink_result:
        #     updates[stone_val] = count
        for stone_val in blink_result:
            new_stones[stone_val] += count
        #new_stones.update(updates)
    if num_iterations == 1:
        return new_stones  
    else:
        return blink_string_list(new_stones, num_iterations - 1)

def main():
    start_time = time.time()
    file_path = sys.argv[1]
    inputs = read_input_string(file_path)
    #inputs  = ['125', '17']
    stones = Counter(inputs)
    print(f"Initial stones: {stones}")
    iterations = 75
    print(f"Iterations: {iterations}")
    stones = blink_string_list(stones, iterations)
    sorted_stones_and_counts = sorted(stones.items(), key=lambda x: int(x[1]), reverse=True)
    # print(f"Final stones: {sorted_stones_and_counts}")
    # print(f"Number of distinct stone types: {len(sorted_stones_and_counts)}")
    total_stones = sum(stones.values())
    print(f"Total stones: {total_stones}")
    #print(cache)
    end_time = time.time()
    elapsed_time = end_time - start_time
    print(f"Elapsed time: {elapsed_time:.2f} seconds")    

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python day_9_problem_1.py <file_path>")
    else:
        main()